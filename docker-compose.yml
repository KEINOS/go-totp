# =============================================================================
#  Docker Compose file for testing on Go versions 1.15 to the latest.
# =============================================================================
# It is recommended to run specifying a specific service and not at once.
#
# - Recommended usage:
#   - To update go.mod:
#     $ docker compose run tidy
#
#   - To unit test:
#     $ docker compose run v1_22
#     $ docker compose run latest
#
#   - To check lint and static analysis:
#     $ docker compose run lint
#
#   - To check critical vulnerabilities:
#     $ docker compose run vuln
#
# - NOT recommended:
#     $ docker compose up
#
# Since the service `tidy` will update/re-write the "go.mod" file to the latest
# module version, during it's process the "go.mod" file will be gone temporarily.
# Thus, `docker compose up` will cause failure in the other container because of
# missing "go.mod" file.
# =============================================================================

volumes:
  GO_PKG_MOD:

services:
  # Service tidy updates the go.mod to the latest
  tidy:
    build:
      context: .
      dockerfile: ./.github/Dockerfile
      args:
        VARIANT: 1.22-alpine
    volumes:
      - .:/workspaces
    entrypoint: [ "./.github/run_go_mod_tidy.sh" ]

  # Run latest golangci-lint
  lint:
    image: golangci/golangci-lint:latest
    working_dir: /workspaces
    volumes:
      - .:/workspaces
      - GO_PKG_MOD:/go/pkg/mod
    entrypoint: golangci-lint run ./...

  # Run latest govulncheck (vulnerability scanner)
  vuln:
    build:
      context: .
      dockerfile: ./.github/Dockerfile
      args:
        VARIANT: alpine
        GOINSTALL: golang.org/x/vuln/cmd/govulncheck@latest
    working_dir: /workspaces
    volumes:
      - .:/workspaces
      - GO_PKG_MOD:/go/pkg/mod
    entrypoint: [ "govulncheck", "./..." ]

  # # Service v1_15 runs the tests on Go v1.15
  # v1_15:
  #   build:
  #     context: .
  #     dockerfile: ./.github/Dockerfile
  #     args:
  #       VARIANT: 1.15-alpine
  #   volumes:
  #     - .:/workspaces
  #     - GO_PKG_MOD:/go/pkg/mod

  # # Service v1_16 runs the tests on Go v1.16
  # v1_16:
  #   build:
  #     context: .
  #     dockerfile: ./.github/Dockerfile
  #     args:
  #       VARIANT: 1.16-alpine
  #   volumes:
  #     - .:/workspaces
  #     - GO_PKG_MOD:/go/pkg/mod

  # # Service v1_17 runs the tests on Go v1.17
  # v1_17:
  #   build:
  #     context: .
  #     dockerfile: ./.github/Dockerfile
  #     args:
  #       VARIANT: 1.17-alpine
  #   volumes:
  #     - .:/workspaces
  #     - GO_PKG_MOD:/go/pkg/mod

  # # Service v1_18 runs the tests on Go v1.18
  # v1_18:
  #   build:
  #     context: .
  #     dockerfile: ./.github/Dockerfile
  #     args:
  #       VARIANT: 1.18-alpine
  #   volumes:
  #     - .:/workspaces
  #     - GO_PKG_MOD:/go/pkg/mod

  # # Service v1_19 runs the tests on Go v1.19
  # v1_19:
  #   build:
  #     context: .
  #     dockerfile: ./.github/Dockerfile
  #     args:
  #       VARIANT: 1.19-alpine
  #   volumes:
  #     - .:/workspaces
  #     - GO_PKG_MOD:/go/pkg/mod

  # Service min is the minimum version we support
  min:
    build:
      context: .
      dockerfile: ./.github/Dockerfile
      args:
        VARIANT: 1.23-alpine
    volumes:
      - .:/workspaces
      - GO_PKG_MOD:/go/pkg/mod

  # Service latest runs the tests on latest Go docker image
  latest:
    build:
      context: .
      dockerfile: ./.github/Dockerfile
      args:
        VARIANT: alpine
    volumes:
      - .:/workspaces
      - GO_PKG_MOD:/go/pkg/mod
